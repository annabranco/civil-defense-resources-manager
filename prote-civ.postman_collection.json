{
	"info": {
		"_postman_id": "1ebcd5f7-08ae-42b5-be6e-66168ac6054a",
		"name": "Protecci√≥n Civil",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "volunteers",
			"item": [
				{
					"name": "[C]reate",
					"item": [
						{
							"name": "[volunteers] create a volunteer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"created_volunteer_id\", 2);\r",
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.collectionVariables.set(\"created_volunteer_id\", jsonData.volunteer.id);\r",
											"        pm.expect(jsonData.created).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"      pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"phone2\": 12345678,\r\n    \"role\": 3,\r\n    \"groups\": [1,2,3,4]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with numeric group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.created).to.equal(false)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')   \r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"groups\": 1,\r\n    \"dummy_data\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with a list of groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.created).to.equal(false)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')   \r",
											"        pm.expect(jsonData.volunteer.groups[1]).to.equal('Logistics')   \r",
											"        pm.expect(jsonData.volunteer.groups[2]).to.equal('Communications')   \r",
											"        pm.expect(jsonData.volunteer.groups[3]).to.equal('Social')   \r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"groups\": [1,2,3,4],\r\n    \"dummy_data\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with no role and group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.created).to.equal(false)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('Generic')   \r",
											"        pm.expect(jsonData.volunteer.role).to.equal('Volunteer')     \r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"dummy_data\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with invalid role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The role id provided in not valid.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 9999\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with invalid group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The group id provided in not valid.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"groups\": 9999\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with a invalid list of groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There is at least one invalid id on the lists provided.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"groups\": [1,2,3,9999]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with a list of more than 5 groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A volunteer cannot be on more than 5 groups.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"groups\": [1,2,3,4,5,6]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"phone2\": \"12345678\",\r\n    \"role\": 3,\r\n    \"groups\": [1,2,3,4]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] create with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"21-07-1994\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[R]ead",
					"item": [
						{
							"name": "[volunteers] read volunteer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    console.log(pm.variables.get(\"ACCESS_LEVEL\"))\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Anna')\r",
											"        pm.expect(jsonData.volunteer.role).to.equal('Commander')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')\r",
											"        pm.expect(jsonData.volunteer.phone1).to.equal(12345678)\r",
											"        pm.expect(jsonData.volunteer.document).to.equal('12345678-W')\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'manager' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    console.log(pm.variables.get(\"ACCESS_LEVEL\"))\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Anna')\r",
											"        pm.expect(jsonData.volunteer.role).to.equal('Commander')\r",
											"        pm.expect(jsonData.volunteer.phone1).to.equal(12345678)\r",
											"        pm.expect(jsonData.volunteer.document).not.to.exist\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')\r",
											"        \r",
											"\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    console.log(pm.variables.get(\"ACCESS_LEVEL\"))\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.message).to.equal(\"User has no permission to access the requested content.\")\r",
											"    });\r",
											"} else {\r",
											"    console.log(pm.variables.get(\"ACCESS_LEVEL\"))\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] read volunteer with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"      pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.message).to.equal('There are no volunteers with the provided id.')\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.message).to.equal(\"User has no permission to access the requested content.\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] read all volunteers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"      pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a simple list with all volunteers\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.volunteers.length).to.be.at.least(4)\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[U]pdate",
					"item": [
						{
							"name": "[volunteers] update volunteer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the updated object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with numeric group id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the updated object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')   \r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": 1,\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with a list of groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the updated object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(true)\r",
											"        pm.expect(jsonData.volunteer.name).to.equal('Lara')\r",
											"        pm.expect(jsonData.volunteer.groups[0]).to.equal('EMS')   \r",
											"        pm.expect(jsonData.volunteer.groups[1]).to.equal('Logistics')   \r",
											"        pm.expect(jsonData.volunteer.groups[2]).to.equal('Communications')   \r",
											"        pm.expect(jsonData.volunteer.groups[3]).to.equal('Social')   \r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update without any changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns an informative message of no data change\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(false)\r",
											"        pm.expect(jsonData.message).to.equal('No information was changed on the request.')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no volunteers with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"Sorry, this resource is permanent and cannot be changed.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with invalid role id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The role id provided in not valid.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 9999,\r\n    \"groups\": 1,\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with invalid group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The group id provided in not valid.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": 9999,\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with a invalid list of groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There is at least one invalid id on the lists provided.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,9999],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with a list of more than 5 groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A volunteer cannot be on more than 5 groups.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4,5,6],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"phone2\": \"12345678\",\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] update with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"21-07-1994\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[D]elete",
					"item": [
						{
							"name": "[volunteers] delete volunteer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset('created_volunteer_id')\r",
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 204\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/{{created_volunteer_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"{{created_volunteer_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] delete with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] delete with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no volunteers with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[volunteers] delete with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 434\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"Sorry, this resource is permanent and cannot be deleted.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/volunteers/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"volunteers",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "[R]ead",
					"item": [
						{
							"name": "[groups] read group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.group.name).to.equal('Social')\r",
											"        pm.expect(jsonData.group.volunteers.length).to.be.at.least(2)\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/4",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "[groups] read group with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no groups with the provided id.\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[groups] read all groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.groups.length).to.equal(7)\r",
											"        pm.expect(jsonData.groups[0].name).to.equal('EMS')\r",
											"        pm.expect(jsonData.groups[0].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.groups[1].name).to.equal('Logistics')\r",
											"        pm.expect(jsonData.groups[1].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.groups[2].name).to.equal('Communications')\r",
											"        pm.expect(jsonData.groups[2].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.groups[3].name).to.equal('Social')\r",
											"        pm.expect(jsonData.groups[3].volunteers.length).to.be.at.least(2)\r",
											"        pm.expect(jsonData.groups[4].name).to.equal('Administration')\r",
											"        pm.expect(jsonData.groups[4].volunteers.length).to.be.at.least(2)\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Allowed",
					"item": [
						{
							"name": "[groups] delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[groups] update group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[groups] create group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{HOST}}/groups/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"groups",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "roles",
			"item": [
				{
					"name": "[R]ead",
					"item": [
						{
							"name": "[roles] read role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.role.name).to.equal('Volunteer')\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[roles] read role with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no roles with the provided id.\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[roles] read all roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.roles.length).to.be.at.least(4)\r",
											"        pm.expect(jsonData.roles[0].name).to.equal('Volunteer')\r",
											"        pm.expect(jsonData.roles[0].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.roles[1].name).to.equal('Team Leader')\r",
											"        pm.expect(jsonData.roles[1].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.roles[2].name).to.equal('Manager')\r",
											"        pm.expect(jsonData.roles[2].volunteers.length).to.be.at.least(1)\r",
											"        pm.expect(jsonData.roles[3].name).to.equal('Commander')\r",
											"        pm.expect(jsonData.roles[3].volunteers.length).to.be.at.least(1)\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not Allowed",
					"item": [
						{
							"name": "[roles] delete role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[roles] update role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[roles] create role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{HOST}}/roles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"roles",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "vehicles",
			"item": [
				{
					"name": "[C]reate",
					"item": [
						{
							"name": "[vehicles] create a vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"created_vehicle_id\", 2);\r",
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.collectionVariables.set(\"created_vehicle_id\", jsonData.vehicle.id);\r",
											"        pm.expect(jsonData.created).to.equal(true)\r",
											"        pm.expect(jsonData.vehicle.name).to.equal('Ambulance Type 2')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 2\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATD\",\r\n    \"year\": 2016,\r\n    \"next_itv\": \"2022-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] create with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] create with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 2\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATD\",\r\n    \"next_itv\": \"2022-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] create with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 2\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATD\",\r\n    \"year\": \"2016\",\r\n    \"next_itv\": \"2022-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] create with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 2\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATD\",\r\n    \"year\": 2016,\r\n    \"next_itv\": \"06-01-2022\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[R]ead",
					"item": [
						{
							"name": "[vehicles] read vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.vehicle.name).to.equal('Ambulance Type 1')\r",
											"        pm.expect(jsonData.vehicle.brand).to.equal('Demers')\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] read vehicle with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no vehicles with the provided id.\")\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] read all vehicles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.vehicles.length).to.be.at.least(2)\r",
											"    });\r",
											"} else if (pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[U]pdate",
					"item": [
						{
							"name": "[vehicles] update vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the updated object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(true)\r",
											"        pm.expect(jsonData.vehicle.name).to.equal('Ambulance Type 2')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 2\",\r\n    \"brand\": \"Mercedes Benz\",\r\n    \"license\": \"1234ATU\",\r\n    \"year\": 2020,\r\n    \"next_itv\": \"2022-04-21\",\r\n    \"incidents\": null,\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] reset changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 1\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATU\",\r\n    \"year\": 2020,\r\n    \"next_itv\": \"2024-06-01\",\r\n    \"incidents\": \"Scuff marks on right passenger door\",\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update without any changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns an informative message of no data change\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(false)\r",
											"        pm.expect(jsonData.message).to.equal('No information was changed on the request.')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 1\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATU\",\r\n    \"year\": 2020,\r\n    \"next_itv\": \"2024-06-01\",\r\n    \"incidents\": \"Scuff marks on right passenger door\",\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no vehicles with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"Sorry, this resource is permanent and cannot be changed.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/{{created_vehicle_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"{{created_vehicle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/{{created_vehicle_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"{{created_vehicle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 1\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATU\",\r\n    \"year\": \"2020\",\r\n    \"next_itv\": \"2024-06-01\",\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/{{created_vehicle_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"{{created_vehicle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] update with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ambulance Type 1\",\r\n    \"brand\": \"Demers\",\r\n    \"license\": \"1234ATU\",\r\n    \"year\": 2020,\r\n    \"next_itv\": \"01-06-2024\",\r\n    \"active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/vehicles/{{created_vehicle_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"{{created_vehicle_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[D]elete",
					"item": [
						{
							"name": "[vehicles] delete vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset('created_vehicle_id')\r",
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/{{created_vehicle_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"{{created_vehicle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] delete with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] delete with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no vehicles with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[vehicles] delete with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 434\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"Sorry, this resource is permanent and cannot be deleted.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/vehicles/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"vehicles",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "services",
			"item": [
				{
					"name": "[C]reate",
					"item": [
						{
							"name": "[services] create a service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"created_service_id\", 2);\r",
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the created object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.collectionVariables.set(\"created_service_id\", jsonData.service.id);\r",
											"        pm.expect(jsonData.created).to.equal(true)\r",
											"        pm.expect(jsonData.service.name).to.equal('Visit to hospitalized elders')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"2021-11-01, 09:20\",\r\n    \"vehicles_num\": 1,\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] create with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] create with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"2021-11-01, 09:20\",\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] create with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"2021-11-01, 09:20\",\r\n    \"vehicles_num\": \"1\",\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] create with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD, hh:mm].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"01-11-2021, 09:20\",\r\n    \"vehicles_num\": 1,\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[R]ead",
					"item": [
						{
							"name": "[services] read service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.service.name).to.equal('Preventive service on football match')\r",
											"        pm.expect(jsonData.service.volunteers_num).to.equal(2)\r",
											"        pm.expect(jsonData.service.vehicles_num).to.equal(1)\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.service.name).to.equal('Preventive service on football match')\r",
											"        pm.expect(jsonData.service.volunteers_num).to.equal(2)\r",
											"        pm.expect(jsonData.service.vehicles_num).to.equal(1)\r",
											"        pm.expect(jsonData.service.contact_name).not.to.exist\r",
											"        pm.expect(jsonData.service.contact_phone).not.to.exist\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for public access\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.service.name).to.equal('Preventive service on football match')\r",
											"        pm.expect(jsonData.service.volunteers_num).not.to.exist\r",
											"        pm.expect(jsonData.service.vehicles_num).not.to.exist\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] read service with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"    pm.expect(jsonData.error_code).to.equal(404)\r",
											"    pm.expect(jsonData.message).to.equal(\"There are no services with the provided id.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] read all services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.services.length).to.be.at.least(3)\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the expect data for the id sent\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.services.length).to.be.at.least(3)\r",
											"        pm.expect(jsonData.services[0].contact_name).not.to.exist\r",
											"        pm.expect(jsonData.services[0].contact_phone).not.to.exist\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"    pm.test(\"Returns the expect data for public access\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(true)\r",
											"        pm.expect(jsonData.services.length).to.be.at.least(3)\r",
											"        pm.expect(jsonData.services[0].name).to.equal('Preventive service on football match')\r",
											"        pm.expect(jsonData.services[0].volunteers_num).not.to.exist\r",
											"        pm.expect(jsonData.services[0].vehicles_num).not.to.exist\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[U]pdate",
					"item": [
						{
							"name": "[services] update service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns the updated object\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(true)\r",
											"        pm.expect(jsonData.service.volunteers.length).to.be.least(2)\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"2021-11-01, 09:20\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update without any changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns an informative message of no data change\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.updated).to.equal(false)\r",
											"        pm.expect(jsonData.message).to.equal('No information was changed on the request.')\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Visit to hospitalized elders\",\r\n    \"place\": \"Hospital Europeo Brigid\",\r\n    \"date\": \"2021-11-01, 09:20\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Janus Frota\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 2,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no services with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with no body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"A data object should be sent on the request.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with incomplete data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are missing required data on the object sent.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fiestas del pueblo\",\r\n    \"place\": \"Av. del Ayuntamiento, S/N\",\r\n    \"date\": \"2021-12-31, 19:00\",\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Yaiza Blanca\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 6,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with incorrect attribute type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"An attribute sent has a wrong type. Please double check all values.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fiestas del pueblo\",\r\n    \"place\": \"Av. del Ayuntamiento, S/N\",\r\n    \"date\": \"2021-12-31, 19:00\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Yaiza Blanca\",\r\n    \"contact_phone\": \"12345678\",\r\n    \"volunteers_num\": 6,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with incorrect date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"The date provided is incorrectly formated. Please use [YYYY-MM-DD, hh:mm].\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fiestas del pueblo\",\r\n    \"place\": \"Av. del Ayuntamiento, S/N\",\r\n    \"date\": \"31-12-2021, 19:00\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Yaiza Blanca\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 6,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with invalid volunteer id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There is at least one invalid id on the lists provided.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fiestas del pueblo\",\r\n    \"place\": \"Av. del Ayuntamiento, S/N\",\r\n    \"date\": \"2021-12-31, 19:00\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2],\r\n    \"contact_name\": \"Yaiza Blanca\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 6,\r\n    \"volunteers\": [2,999]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with invalid vehicle id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Bad Request\")\r",
											"        pm.expect(jsonData.error_code).to.equal(400)\r",
											"        pm.expect(jsonData.message).to.equal(\"There is at least one invalid id on the lists provided.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fiestas del pueblo\",\r\n    \"place\": \"Av. del Ayuntamiento, S/N\",\r\n    \"date\": \"2021-12-31, 19:00\",\r\n    \"vehicles_num\": 1,\r\n    \"vehicles\": [1,2,9999],\r\n    \"contact_name\": \"Yaiza Blanca\",\r\n    \"contact_phone\": 12345678,\r\n    \"volunteers_num\": 6,\r\n    \"volunteers\": [2,3]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] update with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if ((pm.variables.get(\"ACCESS_LEVEL\") === 'admin' || pm.variables.get(\"ACCESS_LEVEL\") === 'manager') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"This service has already passed and can no longer be changed.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Lara\",\r\n    \"surnames\": \"Croft\",\r\n    \"birthday\": \"1994-07-21\",\r\n    \"document\": \"1234567Q\",\r\n    \"address\": \"Baskerville St. 221b\",\r\n    \"email\": \"lara@prote.ww\",\r\n    \"phone1\": 12345678,\r\n    \"role\": 1,\r\n    \"groups\": [1,2,3,4],\r\n    \"active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/services/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[D]elete",
					"item": [
						{
							"name": "[services] delete service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.unset('created_service_id')\r",
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/{{created_service_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"{{created_service_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] delete with no id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns a correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false)\r",
											"    pm.expect(jsonData.error).to.equal(\"Method not Allowed\")\r",
											"    pm.expect(jsonData.error_code).to.equal(405)\r",
											"    pm.expect(jsonData.message).to.equal(\"Are you handling the correct endpoint?\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] delete with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"        pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Not Found\")\r",
											"        pm.expect(jsonData.error_code).to.equal(404)\r",
											"        pm.expect(jsonData.message).to.equal(\"There are no services with the provided id.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/9999",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "[services] delete with permanent id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.variables.get(\"ACCESS_LEVEL\") === 'admin' && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 434\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Returns a correct error message\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.success).to.equal(false)\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"        pm.expect(jsonData.error_code).to.equal(403)\r",
											"        pm.expect(jsonData.message).to.equal(\"Sorry, this resource is permanent and cannot be deleted.\")\r",
											"    });\r",
											"} else if ((pm.variables.get(\"ACCESS_LEVEL\") === 'manager' || pm.variables.get(\"ACCESS_LEVEL\") === 'volunteer') && pm.variables.get(\"ACCESS_TOKEN\")) {\r",
											"    pm.test(\"Status code is 403\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(403);\r",
											"        pm.expect(jsonData.error).to.equal(\"Forbidden\")\r",
											"    });\r",
											"} else {\r",
											"    pm.test(\"Status code is 401\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.response.to.have.status(401);\r",
											"        pm.expect(jsonData.error).to.equal(\"Unauthorized\")\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{HOST}}/services/1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"services",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "https://prote-civ.herokuapp.com/"
		},
		{
			"key": "ACCESS_TOKEN",
			"value": ""
		},
		{
			"key": "ACCESS_LEVEL",
			"value": "public"
		},
		{
			"key": "HOST",
			"value": "localhost:5000",
			"disabled": true
		}
	]
}